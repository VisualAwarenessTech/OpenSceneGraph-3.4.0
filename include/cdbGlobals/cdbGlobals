#pragma once
// Copyright (c) 2016-2017 Visual Awareness Technologies and Consulting Inc, St Petersburg FL
// This file is based on the Common Database (CDB) Specification for USSOCOM
// Version 3.0 – October 2008

// CDB_Tile is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// CDB_Tile is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.

// You should have received a copy of the GNU Lesser General Public License
// along with CDB_Tile.  If not, see <http://www.gnu.org/licenses/>.

// 2015 GAJ Geospatial Enterprises, Orlando FL
// Modified for General Incorporation of Common Database (CDB) support within osgEarth
//
#include "cdbglobals/cdbGlobals_Library.h"
#include <sstream>
#include <iomanip>
#include <vector>
#include <map>

#ifdef _MSC_VER
#if _MSC_VER < 1800
#define round osg::round
#endif
#endif

class GDALDataset;
struct sqlite3;

struct GSMediaKeyStruct
{
	int	LODNum;
	int	UrefNum;
	int	RrefNum;
	GSMediaKeyStruct(int lod, int uref, int rref) : LODNum(lod), UrefNum(uref), RrefNum(rref)
	{
	};
	GSMediaKeyStruct() : LODNum(-1), UrefNum(-1), RrefNum(-1)
	{
	};
	bool operator==(GSMediaKeyStruct &keyvalue)
	{
		if ((LODNum == keyvalue.LODNum) &&
			(UrefNum == keyvalue.UrefNum) &&
			(RrefNum == keyvalue.RrefNum))
			return true;
		else
			return false;
	}
	bool operator>(GSMediaKeyStruct &keyvalue)
	{
		if (keyvalue.LODNum == LODNum)
		{
			if (keyvalue.UrefNum == UrefNum)
			{
				if (keyvalue.RrefNum == RrefNum)
					return false;
				else
					return keyvalue.RrefNum > RrefNum;
			}
			else
				return keyvalue.UrefNum > UrefNum;
		}
		else
			return keyvalue.LODNum > LODNum;
	}
	bool operator<(GSMediaKeyStruct &keyvalue)
	{
		if (keyvalue.LODNum == LODNum)
		{
			if (keyvalue.UrefNum == UrefNum)
			{
				if (keyvalue.RrefNum == RrefNum)
					return false;
				else
					return keyvalue.RrefNum < RrefNum;
			}
			else
				return keyvalue.UrefNum < UrefNum;
		}
		else
			return keyvalue.LODNum < LODNum;
	}
	std::string ToString(void)
	{
		std::string KeyString = std::to_string(LODNum) + "_" + std::to_string(UrefNum) + "_" + std::to_string(RrefNum);
		return KeyString;
	}

};
typedef GSMediaKeyStruct GSMediaKey;

struct GSMediaMemoryStruct
{
	char * bufferdata;
	int	   bufsize;
	GSMediaMemoryStruct() : bufferdata(NULL), bufsize(0)
	{
	};
};
typedef GSMediaMemoryStruct GSMediaMemory;


typedef enum
{
	GSGeometry = 0,
	GSTexture = 1,
	GTGeometry = 2,
	GTTexture = 3,
	GSInvalid = 4,
}GSTableType;

class CDBGLOBALLIBRARYAPI CDB_Global
{
public:

	CDB_Global();
	~CDB_Global();

	void Set_BaseMapLodNum(int num);
	int BaseMapLodNum(void);
	void Set_EnableBathymetry(bool value);
	bool EnableBathymetry(void);
	void Set_LOD0_GS_FullStack(bool value);
	bool LOD0_GS_FullStack(void);
	void Set_LOD0_GT_FullStack(bool value);
	bool LOD0_GT_FullStack(void);
	void Set_CDB_Tile_Be_Verbose(bool value);
	bool CDB_Tile_Be_Verbose(void);
	bool Open_Vector_File(std::string FileName);
	GDALDataset * Get_Dataset(void);
	bool Has_Layer(std::string LayerName);
	bool Load_Media(const std::string MediaId);
	bool Get_Media(const std::string &mediaId, std::stringstream &fin);
	void Check_Done(void);

	static CDB_Global * getInstance(void);

private:

	int s_BaseMapLodNum;
	bool s_EnableBathymetry;
	bool s_LOD0_GS_FullStack;
	bool s_LOD0_GT_FullStack;
	bool s_CDB_Tile_Be_Verbose;

	GDALDataset *	m_ogrDataset;

	std::map<std::string, GSMediaMemory> m_GSGeometryMap;
	std::map<std::string, GSMediaMemory> m_GSTextureMap;

	GSMediaMemory m_GTGeometry;
	GSMediaMemory m_GTTexture;

	std::vector<std::string> m_doneList;

	bool ParseGSKey(const std::string &mediaId, GSMediaKey &Key, std::string &gpkgtablename, GSTableType &TableType);

	bool Add_Media_to_Map(GSMediaKey MyKey, std::string gpkgTableName, GSTableType TableType);


};

typedef enum
{
	NO_IE_Test = 0,
	OGC_CDB_Core = 1,
	VATC_Test_1 = 2,
	IE_Unknown_Test = 3,
}OGC_CDB_Test_Type;

typedef enum
{
	Imagery = 0,
	Elevation = 1,
	ImageryCache = 2,
	ElevationCache = 3,
	GeoPackageMap = 4,
	GeoPackageFootPrint = 5,
	GeoSpecificModel = 6,
	GeoTypicalModel = 7,
	CDB_Unknown = 11
}CDB_Tile_Type;

class CDBGLOBALLIBRARYAPI OGC_IE_Tracking
{
public:
	OGC_IE_Tracking(void);
	virtual ~OGC_IE_Tracking(void);

	void Init_Times(void);
	void Set_Test(OGC_CDB_Test_Type test);
	OGC_CDB_Test_Type Get_Test(void);

	void StartTile(CDB_Tile_Type tt);
	void EndTile(CDB_Tile_Type tt, size_t Feature_Count);
	void StartTileLoad(CDB_Tile_Type tt);
	void EndTileLoad(CDB_Tile_Type tt, size_t Feature_Count);

	static OGC_IE_Tracking * getInstance();

private:
	time_t	m_Time_at_Run_Start;
	time_t	m_Time_at_Run_End;

	time_t	m_Time_at_GS_Tile_Start;
	time_t  m_Time_at_GS_Tile_End;
	size_t	m_GS_Tile_Count;
	size_t  m_GS_Feature_Count;
	time_t	m_Average_GS_Tile_Load_Time;
	time_t	m_Total_GS_Tile_Load_Time;

	time_t	m_Time_at_GT_Tile_Start;
	time_t  m_Time_at_GT_Tile_End;
	size_t	m_GT_Tile_Count;
	size_t  m_GT_Feature_Count;
	time_t	m_Average_GT_Tile_Load_Time;
	time_t	m_Total_GT_Tile_Load_Time;

	time_t	m_Time_at_GS_TileLoad_Start;
	time_t  m_Time_at_GS_TileLoad_End;
	size_t	m_GS_TileLoad_Count;
	size_t  m_GS_FeatureLoad_Count;
	time_t	m_Average_GS_TileLoad_Load_Time;
	time_t	m_Total_GS_TileLoad_Load_Time;

	time_t	m_Time_at_GT_TileLoad_Start;
	time_t  m_Time_at_GT_TileLoad_End;
	size_t	m_GT_TileLoad_Count;
	size_t  m_GT_FeatureLoad_Count;
	time_t	m_Average_GT_TileLoad_Load_Time;
	time_t	m_Total_GT_TileLoad_Load_Time;

	OGC_CDB_Test_Type m_OGC_Test_Type;
};
